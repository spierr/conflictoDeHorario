/* ========================================================================
 * Copyright 2014 horario
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 horario

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.horario.curso.master.logic.ejb;

import co.edu.uniandes.csw.horario.seccion.logic.dto.SeccionDTO;
import co.edu.uniandes.csw.horario.seccion.persistence.api.ISeccionPersistence;
import co.edu.uniandes.csw.horario.curso.logic.dto.CursoDTO;
import co.edu.uniandes.csw.horario.curso.master.logic.api._ICursoMasterLogicService;
import co.edu.uniandes.csw.horario.curso.master.logic.dto.CursoMasterDTO;
import co.edu.uniandes.csw.horario.curso.master.persistence.api.ICursoMasterPersistence;
import co.edu.uniandes.csw.horario.curso.master.persistence.entity.Cursoseccion_cursEntity;
import co.edu.uniandes.csw.horario.curso.persistence.api.ICursoPersistence;
import javax.inject.Inject;

public abstract class _CursoMasterLogicService implements _ICursoMasterLogicService {

    @Inject
    protected ICursoPersistence cursoPersistance;
    @Inject
    protected ICursoMasterPersistence cursoMasterPersistance;
    @Inject
    protected ISeccionPersistence seccionPersistance;

    public CursoMasterDTO createMasterCurso(CursoMasterDTO curso) {
        CursoDTO persistedCursoDTO = cursoPersistance.createCurso(curso.getCursoEntity());
        if (curso.getCreateseccion_curs() != null) {
            for (SeccionDTO seccionDTO : curso.getCreateseccion_curs()) {
                SeccionDTO createdSeccionDTO = seccionPersistance.createSeccion(seccionDTO);
                Cursoseccion_cursEntity cursoSeccionEntity = new Cursoseccion_cursEntity(persistedCursoDTO.getId(), createdSeccionDTO.getId());
                cursoMasterPersistance.createCursoseccion_cursEntity(cursoSeccionEntity);
            }
        }
        // update seccion
        if (curso.getUpdateseccion_curs() != null) {
            for (SeccionDTO seccionDTO : curso.getUpdateseccion_curs()) {
                seccionPersistance.updateSeccion(seccionDTO);
                Cursoseccion_cursEntity cursoSeccionEntity = new Cursoseccion_cursEntity(persistedCursoDTO.getId(), seccionDTO.getId());
                cursoMasterPersistance.createCursoseccion_cursEntity(cursoSeccionEntity);
            }
        }
        return curso;
    }

    public CursoMasterDTO getMasterCurso(Long id) {
        return cursoMasterPersistance.getCurso(id);
    }

    public void deleteMasterCurso(Long id) {
        cursoPersistance.deleteCurso(id);
    }

    public void updateMasterCurso(CursoMasterDTO curso) {
        cursoPersistance.updateCurso(curso.getCursoEntity());

        //---- FOR RELATIONSHIP
        // persist new seccion
        if (curso.getCreateseccion_curs() != null) {
            for (SeccionDTO seccionDTO : curso.getCreateseccion_curs()) {
                SeccionDTO createdSeccionDTO = seccionPersistance.createSeccion(seccionDTO);
                Cursoseccion_cursEntity cursoSeccionEntity = new Cursoseccion_cursEntity(curso.getCursoEntity().getId(), createdSeccionDTO.getId());
                cursoMasterPersistance.createCursoseccion_cursEntity(cursoSeccionEntity);
            }
        }
        // update seccion
        if (curso.getUpdateseccion_curs() != null) {
            for (SeccionDTO seccionDTO : curso.getUpdateseccion_curs()) {
                seccionPersistance.updateSeccion(seccionDTO);
            }
        }
        // delete seccion
        if (curso.getDeleteseccion_curs() != null) {
            for (SeccionDTO seccionDTO : curso.getDeleteseccion_curs()) {
                cursoMasterPersistance.deleteCursoseccion_cursEntity(curso.getCursoEntity().getId(), seccionDTO.getId());
                seccionPersistance.deleteSeccion(seccionDTO.getId());
            }
        }
    }
}
